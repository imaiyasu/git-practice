pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
        // タイムアウト設定を追加（例: 全体で30分以内に完了させる）
        timeout(time: 30, unit: 'MINUTES')
    }
    tools{
        jdk "jdk-17.0.10"
        maven "maven_v3.8.6"
    }
    parameters {
        booleanParam(name: "IS_TRIGGER", defaultValue: false, description: 'デプロイトリガー ※trueでデプロイ実行。')
        booleanParam(name: "IS_CLEAN", defaultValue: false, description: 'ワークスペースのクリーンアップを実行するか')
    }
    environment {
        // 認証ID
        GITLAB_CREDENTIALS_ID = "44552994-23d6-4264-ab28-ff38e448d9bc"

        // プロジェクトGitパス
        GIT_PATH_PATCH = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-patch.git"
        GIT_PATH_APM_DEPEND = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-apm-depend.git"
        GIT_PATH_BASE_DEPEND = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/01_base/blender-he2-${params.COMPANY}-base-depend.git"

        // パッケージGitパス
        GIT_PATH_BASE_CORE_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/01_base/blender-he2-pkg-base-core.git"
        GIT_PATH_APM_DEPEND_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/06_opt_apm/blender-he2-pkg-apm-depend.git"
        GIT_PATH_APM_COMSRV_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/06_opt_apm/blender-he2-pkg-apm-comsrv.git"

        // GitLabコンテナパス
        GITLAB_IMAGE_PATH = "kanden/06_opt_apm/blender-he2-kanden-apm-depend"

        // ファイルパス
        WORK_DIR = "work"
        GLOBAL_SETTINGS = "${WORKSPACE}/${WORK_DIR}/settings.xml"
        TARGET_DIR = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/target"
        TARGET_DIR_PKG = "${WORKSPACE}/blender-he2-pkg-apm-depend-standard-app/target"
        ZIP_FILE = "blender-he2-${params.COMPANY}-apm-depend-*-distribution-${params.COMTYPEA}.zip"
        PKG_ZIP_FILE = "blender-he2-pkg-apm-depend-${params.PKG_VERSION}-AWS-distribution-${params.COMTYPEA}.zip"
        PKG_ZIP_DIR = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/src/main/pkg"
        S3_FILES = "tmp-s3-files"
        POM_APM_DEPEND_STANDARD_APP_PKG = "${WORKSPACE}/blender-he2-pkg-apm-depend-standard-app/pom.xml"
        POM_APM_DEPEND_STANDARD_APP = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/pom.xml"
        POM_APM_DEPEND_PARENT = "./blender-he2-${params.COMPANY}-apm-depend-parent/pom.xml"
        
        // 設定値
        GITLAB_DOMAIN_PORT = "${params.GITLAB_DOMAIN}:${params.GITLAB_PORT}"
        AWS_REGION = "ap-northeast-1"
        DEPLOY_SKIP_MESSAGE = "タグトリガーではないため、デプロイをスキップします。"
        IS_DEPLOY_SKIP = false
    }
    stages {
        // ワークスペースのクリアはデフォルトではスキップ、必要に応じて実行。
        stage('Clean Workspace') {
            when {
                expression { params.IS_CLEAN == true }
            }
            steps {
                cleanWs()
            }
        }

        // 並行して各リポジトリのcheckoutを実施する
        stage('Checkout Repositories') {
            parallel {
                stage('Checkout Apm-Depend') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_APM_DEPEND}"]]
                        ])
                    }
                }
                stage('Checkout Patch') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH}"]],
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_PATCH}"]]
                        ])
                    }
                }
                stage('Checkout Base-Core-PKG') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH_PKG}"]],
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_BASE_CORE_PKG}"]]
                        ])
                    }
                }
            }
        }

        // タグの取得と編集を並行処理
        stage('Tag Operations') {
            parallel {
                stage('Get Latest Tags') {
                    steps {
                        parallel(
                            "tag-base-depend": {
                                script {
                                    def api_base = "${params.GITLAB_DOMAIN}/gitlab/api/v4/projects/${params.GITLAB_PROJECT_ID_BASE}/repository/tags"
                                    def response_base = sh(script: "curl --header 'PRIVATE-TOKEN: ${params.GITLAB_API_TOKEN}' ${api_base}", returnStdout: true).trim()
                                    def json_base = readJSON text: response_base
                                    gitBaseTag = json_base[0].name
                                }
                            },
                            "tag-apm-depend": {
                                script {
                                    def api_base = "${params.GITLAB_DOMAIN}/gitlab/api/v4/projects/${params.GITLAB_PROJECT_ID_APM}/repository/tags"
                                    def response_base = sh(script: "curl --header 'PRIVATE-TOKEN: ${params.GITLAB_API_TOKEN}' ${api_base}", returnStdout: true).trim()
                                    def json_base = readJSON text: response_base
                                    gitApmTag = json_base[0].name
                                }
                            }
                        )
                    }
                }
                stage('Edit Tags') {
                    steps {
                        script {
                            awsTag = "ecs-${gitApmTag}-${gitBaseTag}"
                            echo "awsTag: ${awsTag}"
                        }
                    }
                }
            }
        }

        // 並行してビルドプロセスを実行
        stage('Build Process') {
            parallel {
                stage('Pre-Build Apm-Depend') {
                    steps {
                        sh """
                        mvn package \
                        -f ${POM_APM_DEPEND_STANDARD_APP_PKG} \
                        --global-settings ${GLOBAL_SETTINGS} \
                        -DcomTypeA=${params.COMTYPEA} \
                        -DskipTests=true
                        """
                    }
                }
                stage('Build Main Apm-Depend') {
                    steps {
                        sh """
                        cp ${TARGET_DIR_PKG}/${PKG_ZIP_FILE} ${PKG_ZIP_DIR}
                        cd blender-he2-${params.COMPANY}-apm-depend-standard-app
                        mvn clean \
                        package \
                        -f ${POM_APM_DEPEND_STANDARD_APP} \
                        --global-settings ${GLOBAL_SETTINGS} \
                        -DcomTypeA=${params.COMTYPEA} \
                        -DpkgVersion=${params.PKG_VERSION} \
                        -DskipTests=true
                        """
                    }
                }
            }
        }

        // 必要なときのみNexusにデプロイ
        stage('Deploy to Nexus') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                sh """
                cp ${TARGET_DIR_PKG}/${PKG_ZIP_FILE} ${PKG_ZIP_DIR}
                cd blender-he2-${params.COMPANY}-apm-depend-standard-app
                mvn deploy \
                -f ${POM_APM_DEPEND_STANDARD_APP} \
                --global-settings ${GLOBAL_SETTINGS} \
                -DcomTypeA=${params.COMTYPEA} \
                -DpkgVersion=${params.PKG_VERSION} \
                -DskipTests=true
                """
            }
        }

        // イメージ作成、ECRへのpush
        stage('Docker and ECR Operations') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${GITLAB_CREDENTIALS_ID}", passwordVariable: "GIT_PASSWORD", usernameVariable: "GIT_USERNAME")]) {
                        sh """
                        docker login -u ${GIT_USERNAME} -p ${GIT_PASSWORD} ${GITLAB_DOMAIN_PORT}
                        docker pull ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG}
                        docker tag ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG} \
                        ${params.ECR_REGISTRY}/${params.ECR_REPOSITORY}:${awsTag}
                        docker images
                        """
                    }
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${params.AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${params.ECR_REGISTRY}
                        docker push ${params.ECR_REGISTRY}/${params.ECR_REPOSITORY}:${awsTag}
                        """
                    }
                }
            }
        }

        // S3にファイルをアップロード
        stage('S3 Upload Files') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${params.AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                    aws s3 cp ${WORKSPACE}/${S3_FILES}/ ${params.BACKET}/${awsTag} --recursive --exclude ".gitkeep" --exclude "*/.gitkeep" --exclude "*/*DUMMY*"
                    aws s3 cp ${WORKSPACE}/${WORK_DIR}/pkg ${params.BACKET}/${awsTag}/config/pkg --recursive --exclude "*" \
                    --include "he-pkg-adaptersrv-util-config.properties" \
                    --include "he-pkg-common-cassandra.properties" \
                    --include "he-pkg-common-core-config.properties" \
                    --include "he-pkg-comsrv-event-config-iot.properties" \
                    --include "he-pkg-comsrv-event-config.properties"
                    aws s3 cp ${TARGET_DIR}/blender-he-depend/application-config/active ${params.BACKET}/${awsTag}/active --recursive --exclude ".gitkeep" --exclude "*/.gitkeep"
                    aws s3 cp ${TARGET_DIR}/blender-he-depend/resources ${params.BACKET}/${awsTag}/resources --recursive --exclude ".gitkeep" --exclude "*/.gitkeep"
                    aws s3 cp ${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/config ${params.BACKET}/${awsTag}/config --recursive --exclude ".gitkeep" --exclude "*/.gitkeep" --exclude "*/*DUMMY*"
                    aws s3 cp ${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/config_kanden ${params.BACKET}/${awsTag}/config --recursive --exclude ".gitkeep" --exclude "*/.gitkeep" --exclude "*/*DUMMY*"
                    aws s3 cp ${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/sh/*.sh ${params.BACKET}/${awsTag}/ --exclude ".gitkeep" --exclude "*/.gitkeep"
                    """
                }
            }
        }
    }
}