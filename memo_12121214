以下は、積みゲー管理用のWebアプリケーションをReact（TypeScript）とGoを使用して構築するための詳細な手順です。これには設計、開発、テスト、デプロイ、CI/CDの構築が含まれます。

1. 要件定義
	•	機能概要:
	•	ユーザー登録・ログイン（認証機能）
	•	ゲームの登録（タイトル、プラットフォーム、評価、クリア状況など）
	•	ゲームリストの表示と検索
	•	ゲームの編集・削除
	•	クリア状況の分析（統計情報表示）
	•	使用技術:
	•	フロントエンド: React, TypeScript
	•	サーバーサイド: Go (Ginフレームワーク)
	•	データベース: PostgreSQL
	•	インフラ: AWS（EC2, S3, RDS）
	•	コンテナ: Docker
	•	CI/CD: GitHub Actions

2. システム設計

2.1 アーキテクチャ
	•	フロントエンド: Reactアプリケーション
	•	APIサーバー: REST API（Goで実装）
	•	データベース: PostgreSQL
	•	インフラ: DockerコンテナをAWS EC2上で稼働

3. 実装手順

3.1 プロジェクトセットアップ

バックエンド（Go）
	1.	必要なフォルダ構成を作成:

mkdir -p game-manager/backend
cd game-manager/backend


	2.	Goモジュールの初期化:

go mod init github.com/username/game-manager-backend


	3.	必要な依存ライブラリをインストール:

go get -u github.com/gin-gonic/gin
go get -u github.com/jinzhu/gorm
go get -u github.com/lib/pq
go get -u github.com/dgrijalva/jwt-go


	4.	ファイル構成:

backend/
├── main.go           # エントリーポイント
├── controllers/      # コントローラー
├── models/           # データモデル
├── routes/           # APIルート
├── services/         # ロジック
├── utils/            # ユーティリティ
└── config/           # 設定ファイル



フロントエンド（React + TypeScript）
	1.	Reactプロジェクトの作成:

mkdir -p ../frontend
cd ../frontend
npx create-react-app . --template typescript


	2.	必要な依存ライブラリをインストール:

npm install axios react-router-dom @mui/material @emotion/react @emotion/styled


	3.	フォルダ構成:

frontend/
├── src/
│   ├── components/  # UIコンポーネント
│   ├── pages/       # ページ
│   ├── services/    # API通信
│   ├── App.tsx      # ルートコンポーネント
│   └── index.tsx    # エントリーポイント
└── package.json

3.2 バックエンドの実装

main.go

package main

import (
	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func main() {
	r := gin.Default()

	// Database connection
	dsn := "host=localhost user=postgres password=yourpassword dbname=game_manager port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("Failed to connect to database")
	}

	// Routes
	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{"status": "OK"})
	})

	r.Run(":8080")
}

Gameモデル

models/game.go:

package models

import "gorm.io/gorm"

type Game struct {
	gorm.Model
	Title       string `json:"title"`
	Platform    string `json:"platform"`
	Rating      int    `json:"rating"`
	Cleared     bool   `json:"cleared"`
	Description string `json:"description"`
}

3.3 フロントエンドの実装

App.tsx

import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import GameList from "./pages/GameList";
import AddGame from "./pages/AddGame";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<GameList />} />
        <Route path="/add" element={<AddGame />} />
      </Routes>
    </Router>
  );
}

export default App;

GameList.tsx

import React, { useEffect, useState } from "react";
import axios from "axios";

const GameList = () => {
  const [games, setGames] = useState([]);

  useEffect(() => {
    axios.get("http://localhost:8080/games").then((response) => {
      setGames(response.data);
    });
  }, []);

  return (
    <div>
      <h1>Game List</h1>
      <ul>
        {games.map((game: any) => (
          <li key={game.id}>
            {game.title} - {game.platform}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default GameList;

3.4 Dockerでコンテナ化

Dockerfile（バックエンド）

FROM golang:1.20

WORKDIR /app
COPY . .

RUN go mod tidy
RUN go build -o main .

CMD ["./main"]

Dockerfile（フロントエンド）

FROM node:18

WORKDIR /app
COPY package*.json ./

RUN npm install
COPY . .

RUN npm run build

CMD ["npm", "start"]

3.5 CI/CD（GitHub Actions）

.github/workflows/deploy.yml

name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        run: |
          docker build -t game-manager-backend ./backend
          docker build -t game-manager-frontend ./frontend
          docker tag game-manager-backend:latest your-docker-repo/backend:latest
          docker tag game-manager-frontend:latest your-docker-repo/frontend:latest
          docker push your-docker-repo/backend:latest
          docker push your-docker-repo/frontend:latest

      - name: Deploy to AWS
        run: |
          ssh -i ~/.ssh/your-key.pem ec2-user@your-ec2-instance "
          docker pull your-docker-repo/backend:latest &&
          docker pull your-docker-repo/frontend:latest &&
          docker-compose up -d"

4. 次のアクション

a. PostgreSQLのテーブル設計とマイグレーションを作成
b. 単体テストの実装をGoとReactそれぞれで追加