pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
        cache(time: 10, paths: ['~/.m2/repository'])  // Mavenリポジトリのキャッシュ
    }
    tools {
        jdk "jdk-17.0.10"
        maven "maven_v3.8.6"
    }
    parameters {
        booleanParam(name: "IS_TRIGGER", defaultValue: false, description: 'デプロイトリガー ※trueでデプロイ実行。')
    }
    environment {
        GITLAB_CREDENTIALS_ID = "44552994-23d6-4264-ab28-ff38e448d9bc"
        GIT_PATH_APM_COMSRV = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-apm-comsrv.git"
        GIT_PATH_S3_CONFIG = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-apm-s3-config.git"
        GIT_PATH_PATCH = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-patch.git"
        GIT_PATH_BASE_CORE_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/01_base/blender-he2-pkg-base-core.git"
        GIT_PATH_APM_COMSRV_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/06_opt_apm/blender-he2-pkg-apm-comsrv.git"
        GITLAB_IMAGE_PATH = "kanden/06_opt_apm/blender-he2-kanden-apm-comsrv"
        WORK_DIR = "work"
        GLOBAL_SETTINGS = "${WORKSPACE}/${WORK_DIR}/settings.xml"
        S3_FILES = "tmp-s3-files"
        POM_APM_COMSRV_WEBAPP_PKG = "${WORKSPACE}/blender-he2-pkg-apm-comsrv-webapp/pom.xml"
        POM_APM_COMSRV_WEBAPP = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-comsrv-webapp/pom.xml"
        AWS_REGION = "ap-northeast-1"
        DEPLOY_SKIP_MESSAGE = "タグトリガーではないため、デプロイをスキップします。"
        IS_DEPLOY_SKIP = false
    }
    stages {
        // 初期判定を行い、スキップすべきかを決定する
        stage('Determine Trigger') {
            steps {
                script {
                    // 最新のTagを取得して、デプロイスキップの判定を行う
                    def gitTag = sh(script: "git describe --tags `git rev-list --tags --max-count=1`", returnStdout: true).trim()
                    def tagCreationTime = sh(script: "git for-each-ref --format='%(taggerdate:iso8601)' refs/tags/${gitTag}", returnStdout: true).trim()
                    def tagCreationUnixTime = sh(script: "date -d '${tagCreationTime}' +%s", returnStdout: true).trim().toLong()
                    def currentUnixTime = sh(script: "date +%s", returnStdout: true).trim().toLong()
                    def timeDifference = currentUnixTime - tagCreationUnixTime

                    if (timeDifference <= Integer.parseInt("${params.TAG_PERIOD_SEC}")) {
                        IS_DEPLOY_SKIP = false
                    } else {
                        IS_DEPLOY_SKIP = true
                        echo "${DEPLOY_SKIP_MESSAGE}[LatestTag: ${gitTag}]"
                    }
                }
            }
        }

        // ワークスペースのクリーンアップとGitリポジトリのクローンを並列で実行
        stage('Preparation') {
            parallel {
                stage('Clean Workspace') {
                    steps {
                        cleanWs()
                    }
                }
                stage('Checkout Apm-Comsrv') {
                    steps {
                        checkout([$class: "GitSCM", 
                            branches: [[name: "${params.TARGET_BRANCH}"]],
                            userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_APM_COMSRV}"]]
                        ])
                    }
                }
            }
        }

        // リソースの並列取得
        stage('Get Resources') {
            parallel {
                stage('Checkout Base-Core-PKG') {
                    steps {
                        checkout([$class: "GitSCM", 
                            branches: [[name: "${params.TARGET_BRANCH_PKG}"]],
                            userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_BASE_CORE_PKG}"]]
                        ])
                    }
                }
                stage('Checkout Patch and S3-Config') {
                    parallel {
                        stage('Checkout Patch') {
                            steps {
                                checkout([$class: "GitSCM", 
                                    branches: [[name: "${params.TARGET_BRANCH}"]],
                                    userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_PATCH}"]]
                                ])
                            }
                        }
                        stage('Checkout S3-Config') {
                            steps {
                                checkout([$class: "GitSCM", 
                                    branches: [[name: "${params.TARGET_BRANCH}"]],
                                    userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_S3_CONFIG}"]]
                                ])
                            }
                        }
                    }
                }
            }
        }

        // Mavenの設定ファイルコピー
        stage('Get Settings.xml') {
            steps {
                sh """
                mkdir -p ${WORK_DIR}
                cp ${WORKSPACE}/settings.xml ${WORK_DIR}/settings.xml
                """
            }
        }

        // ビルドステージを並列化
        stage('Build and Prepare Resources') {
            parallel {
                stage('Pre-Build Apm-Comsrv-PKG') {
                    steps {
                        sh """
                        mvn clean install \
                        -f ${POM_APM_COMSRV_WEBAPP_PKG} \
                        --global-settings ${GLOBAL_SETTINGS} \
                        -DskipTests=true
                        """
                    }
                }
                stage('Prepare Wildfly-Com') {
                    steps {
                        sh """
                        tar xzvf ${WORKSPACE}/${WORK_DIR}/blender-he2-pkg-apm-comsrv-webapp/files/wildfly-com.tar.gz -C ${WORKSPACE}/blender-he2-kanden-apm-comsrv-webapp/files
                        cp -r ${WORKSPACE}/${WORK_DIR}/blender-he2-pkg-apm-comsrv-webapp ${WORKSPACE}/blender-he2-kanden-apm-comsrv-webapp/files
                        """
                    }
                }
            }
        }

        // メインビルドとデプロイを実行
        stage('Main Build and Deployment') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                sh """
                cd ${WORKSPACE}/blender-he2-${params.COMPANY}-apm-comsrv-webapp
                mvn clean package deploy \
                -f ${POM_APM_COMSRV_WEBAPP} \
                --global-settings ${GLOBAL_SETTINGS} \
                -DskipTests=true
                """
            }
        }

        // Dockerイメージの作成とECRへのプッシュ
        stage('Create and Push Docker Image') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITLAB_CREDENTIALS_ID}", passwordVariable: "GIT_PASSWORD", usernameVariable: "GIT_USERNAME")]) {
                    sh """
                    docker login -u ${GIT_USERNAME} -p ${GIT_PASSWORD} ${GITLAB_DOMAIN_PORT}
                    docker pull ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG}
                    docker tag ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG} ${params.ECR_REGISTRY}/${params.ECR_REPOSITORY}:${awsTag}
                    docker push ${params.ECR_REGISTRY}/${params.ECR_REPOSITORY}:${awsTag}
                    """
                }
            }
        }

        // S3へのアップロード
        stage('S3 Upload') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                withCredentials([[$class: "AmazonWebServicesCredentialsBinding", credentialsId: "${params.AWS_CREDENTIALS_ID}", accessKeyVariable: "AWS_ACCESS_KEY_ID", secretKeyVariable: "AWS_SECRET_ACCESS_KEY"]]) {
                    sh """
                    aws s3 cp ${WORKSPACE}/${S3_FILES}/ ${params.BACKET}/${awsTag} --recursive --exclude "*/.gitkeep"
                    aws s3 cp ${WORKSPACE}/blender-he2-${params.COMPANY}-apm-comsrv-webapp/src/main/conf ${params.BACKET}/${awsTag}/configuration --recursive --exclude "*/.gitkeep"
                    """
                }
            }
        }
    }
}