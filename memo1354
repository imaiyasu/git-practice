pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
        timeout(time: 30, unit: 'MINUTES')  // 全体タイムアウト設定
    }
    tools {
        jdk "jdk-17.0.10"
        maven "maven_v3.8.6"
    }
    parameters {
        booleanParam(name: "IS_TRIGGER", defaultValue: false, description: 'デプロイトリガー ※trueでデプロイ実行。')
        booleanParam(name: "IS_CLEAN", defaultValue: false, description: 'ワークスペースのクリーンアップを実行するか')
    }
    environment {
        // 認証ID
        GITLAB_CREDENTIALS_ID = "44552994-23d6-4264-ab28-ff38e448d9bc"

        // プロジェクトGitパス
        GIT_PATH_PATCH = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-patch.git"
        GIT_PATH_APM_DEPEND = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/06_opt_apm/blender-he2-${params.COMPANY}-apm-depend.git"
        GIT_PATH_BASE_DEPEND = "http://${params.GITLAB_DOMAIN}/gitlab/${params.COMPANY}/01_base/blender-he2-${params.COMPANY}-base-depend.git"

        // パッケージGitパス
        GIT_PATH_BASE_CORE_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/01_base/blender-he2-pkg-base-core.git"
        GIT_PATH_APM_DEPEND_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/06_opt_apm/blender-he2-pkg-apm-depend.git"
        GIT_PATH_APM_COMSRV_PKG = "http://${params.GITLAB_DOMAIN}/gitlab/hes-package/06_opt_apm/blender-he2-pkg-apm-comsrv.git"

        // GitLabコンテナパス
        GITLAB_IMAGE_PATH = "kanden/06_opt_apm/blender-he2-kanden-apm-depend"

        // ファイルパス
        WORK_DIR = "work"
        GLOBAL_SETTINGS = "${WORKSPACE}/${WORK_DIR}/settings.xml"
        TARGET_DIR = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/target"
        TARGET_DIR_PKG = "${WORKSPACE}/blender-he2-pkg-apm-depend-standard-app/target"
        ZIP_FILE = "blender-he2-${params.COMPANY}-apm-depend-*-distribution-${params.COMTYPEA}.zip"
        PKG_ZIP_FILE = "blender-he2-pkg-apm-depend-${params.PKG_VERSION}-AWS-distribution-${params.COMTYPEA}.zip"
        PKG_ZIP_DIR = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/src/main/pkg"
        S3_FILES = "tmp-s3-files"
        POM_APM_DEPEND_STANDARD_APP_PKG = "${WORKSPACE}/blender-he2-pkg-apm-depend-standard-app/pom.xml"
        POM_APM_DEPEND_STANDARD_APP = "${WORKSPACE}/blender-he2-${params.COMPANY}-apm-depend-standard-app/pom.xml"
        POM_APM_DEPEND_PARENT = "./blender-he2-${params.COMPANY}-apm-depend-parent/pom.xml"
        
        // 設定値
        GITLAB_DOMAIN_PORT = "${params.GITLAB_DOMAIN}:${params.GITLAB_PORT}"
        AWS_REGION = "ap-northeast-1"
        DEPLOY_SKIP_MESSAGE = "タグトリガーではないため、デプロイをスキップします。"
        IS_DEPLOY_SKIP = false

        // Mavenキャッシュディレクトリ
        MAVEN_CACHE = "${WORKSPACE}/.m2"
    }
    stages {
        // ワークスペースのクリアはデフォルトではスキップ、必要に応じて実行
        stage('Clean Workspace') {
            when {
                expression { params.IS_CLEAN == true }
            }
            steps {
                cleanWs()
            }
        }

        // Mavenキャッシュの復元
        stage('Unstash Maven Cache') {
            steps {
                script {
                    // Mavenキャッシュを復元
                    try {
                        unstash 'maven-cache'
                        echo "Maven cache restored successfully."
                    } catch (Exception e) {
                        echo "No previous Maven cache found, starting without cache."
                    }
                }
            }
        }

        // 各リポジトリのチェックアウトを並行処理
        stage('Checkout Repositories') {
            parallel {
                stage('Checkout Apm-Depend') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_APM_DEPEND}"]]
                        ])
                    }
                }
                stage('Checkout Patch') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_PATCH}"]]
                        ])
                    }
                }
                stage('Checkout Base-Core-PKG') {
                    steps {
                        checkout([$class: "GitSCM", 
                        branches: [[name: "${params.TARGET_BRANCH_PKG}"]],
                        doGenerateSubmoduleConfigurations: false,
                        userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GIT_PATH_BASE_CORE_PKG}"]]
                        ])
                    }
                }
            }
        }

        // 並行してビルドを実行し、Mavenキャッシュを利用
        stage('Build Process') {
            parallel {
                stage('Pre-Build Apm-Depend') {
                    steps {
                        sh """
                        mvn package \
                        -f ${POM_APM_DEPEND_STANDARD_APP_PKG} \
                        --global-settings ${GLOBAL_SETTINGS} \
                        -DcomTypeA=${params.COMTYPEA} \
                        -DskipTests=true \
                        -Dmaven.repo.local=${MAVEN_CACHE}  // Mavenキャッシュを使用
                        """
                    }
                }
                stage('Build Main Apm-Depend') {
                    steps {
                        sh """
                        mvn clean \
                        package \
                        -f ${POM_APM_DEPEND_STANDARD_APP} \
                        --global-settings ${GLOBAL_SETTINGS} \
                        -DcomTypeA=${params.COMTYPEA} \
                        -DpkgVersion=${params.PKG_VERSION} \
                        -DskipTests=true \
                        -Dmaven.repo.local=${MAVEN_CACHE}  // Mavenキャッシュを使用
                        """
                    }
                }
            }
        }

        // ビルド後にMavenキャッシュを保存
        stage('Stash Maven Cache') {
            steps {
                script {
                    // Mavenキャッシュを保存
                    stash includes: '.m2/**/*', name: 'maven-cache'
                    echo "Maven cache stashed successfully."
                }
            }
        }

        // Nexusデプロイは条件付きで実行
        stage('Deploy to Nexus') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                sh """
                mvn deploy \
                -f ${POM_APM_DEPEND_STANDARD_APP} \
                --global-settings ${GLOBAL_SETTINGS} \
                -DcomTypeA=${params.COMTYPEA} \
                -DpkgVersion=${params.PKG_VERSION} \
                -DskipTests=true \
                -Dmaven.repo.local=${MAVEN_CACHE}  // Mavenキャッシュを使用
                """
            }
        }

        // Dockerイメージ作成とECRプッシュも条件付きで実行
        stage('Docker and ECR Operations') {
            when {
                expression { IS_DEPLOY_SKIP != true }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${GITLAB_CREDENTIALS_ID}", passwordVariable: "GIT_PASSWORD", usernameVariable: "GIT_USERNAME")]) {
                        sh """
                        docker login -u ${GIT_USERNAME} -p ${GIT_PASSWORD} ${GITLAB_DOMAIN_PORT}
                        docker pull ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG}
                        docker tag ${GITLAB_DOMAIN_PORT}/${GITLAB_IMAGE_PATH}:${params.IMAGE_TAG} \
                        ${params.ECR_REGISTRY}/${params.ECR_REPOSITORY}:${awsTag}
                        docker images
                        """
                    }
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${params.AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-