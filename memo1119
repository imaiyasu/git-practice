AWS Inspectorを使って、JenkinsからECSにデプロイしたコンテナの脆弱性診断を行うための手順は次の通りです。AWS Inspectorを使用すると、コンテナイメージのセキュリティ診断や脆弱性評価が可能です。この手順では、JenkinsパイプラインにAWS Inspectorの診断プロセスを組み込みます。

手順概要

	1.	AWS Inspectorのセットアップ
AWS InspectorがECSリソースにアクセスできるように設定を行います。
	2.	JenkinsパイプラインにInspectorの診断ステージを追加
Jenkinsパイプラインで脆弱性診断をトリガーし、結果を収集します。
	3.	診断結果の収集と表示
Inspectorの診断結果を取得し、レポートを生成します。

詳細手順

1. AWS Inspectorのセットアップ

	1.	Amazon Inspectorの有効化
AWSマネジメントコンソールでAmazon Inspectorを有効化します。
	2.	IAMロール設定
Inspectorに必要なIAMロール（AmazonInspector2ReadOnlyAccessとAmazonECS_FullAccessなど）を作成し、JenkinsからInspector APIにアクセスできるようにします。
	3.	ECSクラスターのスキャン対象設定
ECSクラスターで実行しているコンテナをInspectorでスキャンできるよう、スキャン設定を確認して、ECSがスキャン対象として認識されていることを確認します。

2. JenkinsパイプラインにInspectorの診断ステージを追加

以下のコードは、DockerイメージがECSにデプロイされた後、AWS Inspectorでの診断を開始し、診断完了を待機するJenkinsパイプラインステージを追加します。

stage('Run AWS Inspector') {
    when {
        expression { IS_DEPLOY_SKIP != true }
    }
    steps {
        withCredentials(
            [[
                $class: "AmazonWebServicesCredentialsBinding",
                credentialsId: "${params.AWS_CREDENTIALS_ID}",
                accessKeyVariable: "AWS_ACCESS_KEY_ID",
                secretKeyVariable: "AWS_SECRET_ACCESS_KEY"
            ]]
        ) {
            script {
                // InspectorのターゲットARNを指定し、スキャンを実行
                def targetArn = "arn:aws:inspector2:${AWS_REGION}:${params.AWS_ACCOUNT_ID}:target/ecs/${params.ECS_CLUSTER_NAME}"
                def assessmentArn = sh(script: """
                    aws inspector2 start-assessment-run --resource-group-arn ${targetArn} --region ${AWS_REGION} --query "assessmentRunArn" --output text
                """, returnStdout: true).trim()
                
                // スキャン完了を待機
                timeout(time: 15, unit: 'MINUTES') {
                    waitUntil {
                        def status = sh(script: """
                            aws inspector2 describe-assessment-runs --assessment-run-arns ${assessmentArn} --query "assessmentRuns[0].state" --output text --region ${AWS_REGION}
                        """, returnStdout: true).trim()
                        return status == "COMPLETED"
                    }
                }
                
                echo "AWS Inspector scan completed successfully. Assessment Run ARN: ${assessmentArn}"
            }
        }
    }
}

3. 診断結果の収集と表示

診断結果を取得し、コンソール出力またはS3にアップロードします。以下のコードをJenkinsfileに追加してください。

stage('Retrieve AWS Inspector Findings') {
    when {
        expression { IS_DEPLOY_SKIP != true }
    }
    steps {
        withCredentials(
            [[
                $class: "AmazonWebServicesCredentialsBinding",
                credentialsId: "${params.AWS_CREDENTIALS_ID}",
                accessKeyVariable: "AWS_ACCESS_KEY_ID",
                secretKeyVariable: "AWS_SECRET_ACCESS_KEY"
            ]]
        ) {
            script {
                // 診断結果の取得
                def findings = sh(script: """
                    aws inspector2 list-findings --assessment-run-arns ${assessmentArn} --query "findings[*].{Title:title, Severity:severity, Description:description}" --output json --region ${AWS_REGION}
                """, returnStdout: true).trim()
                
                echo "AWS Inspector Findings: ${findings}"
                
                // 診断結果をS3にアップロード
                sh """
                    echo '${findings}' > inspector_findings.json
                    aws s3 cp inspector_findings.json s3://${params.S3_BUCKET_NAME}/${awsTag}/inspector_findings.json --region ${AWS_REGION}
                """
            }
        }
    }
}

参考リンク

	•	AWS Inspectorの公式ドキュメント
	•	JenkinsでのAWS CLIの使用方法
	•	ECSの脆弱性スキャンとInspector

これで、JenkinsパイプラインがECSデプロイ後にAWS Inspectorを利用して脆弱性診断を行い、診断結果を取得・表示できるようになります。