以下に、次のアクションを詳細に示します。これに従えば、アプリケーションの開発をより進められます。

4. 次のアクション

4.1 PostgreSQLのテーブル設計とマイグレーションを作成

1. テーブル設計

ゲーム管理に必要なテーブル設計を以下の通り定義します：
	•	users: ユーザー情報（認証用）
	•	games: ゲーム情報
	•	user_games: ユーザーごとのゲームデータ（中間テーブル）

-- users テーブル
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- games テーブル
CREATE TABLE games (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    platform VARCHAR(50),
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- user_games テーブル
CREATE TABLE user_games (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    game_id INT REFERENCES games(id),
    cleared BOOLEAN DEFAULT FALSE,
    rating INT CHECK (rating >= 0 AND rating <= 10),
    UNIQUE (user_id, game_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

2. GORMでマイグレーションを実装

backend/main.goに自動マイグレーションを追加：

package main

import (
	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"your_project/models"
)

func main() {
	r := gin.Default()

	// Database connection
	dsn := "host=localhost user=postgres password=yourpassword dbname=game_manager port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("Failed to connect to database")
	}

	// Auto-migrate models
	db.AutoMigrate(&models.User{}, &models.Game{}, &models.UserGame{})

	r.Run(":8080")
}

models/以下にモデルファイルを用意：

// models/user.go
package models

import "gorm.io/gorm"

type User struct {
	gorm.Model
	Username     string `json:"username" gorm:"unique;not null"`
	Email        string `json:"email" gorm:"unique;not null"`
	PasswordHash string `json:"password_hash"`
}

// models/game.go
package models

import "gorm.io/gorm"

type Game struct {
	gorm.Model
	Title       string `json:"title"`
	Platform    string `json:"platform"`
	Description string `json:"description"`
}

// models/user_game.go
package models

import "gorm.io/gorm"

type UserGame struct {
	gorm.Model
	UserID  uint `json:"user_id"`
	GameID  uint `json:"game_id"`
	Cleared bool `json:"cleared"`
	Rating  int  `json:"rating"`
}

4.2 単体テストの実装

1. Go (バックエンド)

backend/testsフォルダを作成してテストを記述。

tests/main_test.go:

package tests

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

func TestHealthCheck(t *testing.T) {
	r := gin.Default()
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "OK"})
	})

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/health", nil)
	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "OK")
}

テスト実行:

go test ./tests

2. React (フロントエンド)

frontend/src/__tests__フォルダを作成。

src/__tests__/GameList.test.tsx:

import { render, screen } from "@testing-library/react";
import axios from "axios";
import GameList from "../pages/GameList";

jest.mock("axios");

test("renders game list", async () => {
  const games = [
    { id: 1, title: "Game 1", platform: "PC" },
    { id: 2, title: "Game 2", platform: "Console" },
  ];
  (axios.get as jest.Mock).mockResolvedValue({ data: games });

  render(<GameList />);

  const gameItems = await screen.findAllByRole("listitem");
  expect(gameItems).toHaveLength(2);
  expect(gameItems[0]).toHaveTextContent("Game 1 - PC");
  expect(gameItems[1]).toHaveTextContent("Game 2 - Console");
});

テスト実行:

npm test

4.3 CI/CDパイプラインの改良

1. テストステージの追加

GitHub Actionsにテストステージを組み込む：
.github/workflows/deploy.yml:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Run Go tests
        run: |
          cd backend
          go test ./...

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Run React tests
        run: |
          cd frontend
          npm install
          npm test

2. デプロイと組み合わせる

テストが成功した場合にのみデプロイを行う設定を追加。

5. 次にやることの提案

a. 統計情報（クリア率、プラットフォーム別のゲーム数など）のAPIとUIを追加
b. 認証機能（JWTを利用したログイン・サインアップ）を実装